# Задача №39. Решение в группах
# Даны два массива чисел. Требуется вывести те элементы
# первого массива (в том порядке, в каком они идут в первом
# массиве), которых нет во втором массиве. Пользователь вводит
# число N - количество элементов в первом массиве, затем N
# чисел - элементы массива. Затем число M - количество
# элементов во втором массиве. Затем элементы второго массива
# (каждое число вводится с новой строки)

# N = int(input("Введите длину первого массива: "))
# list1 = []
# for i in range(N):
#     list1.append(int(input(f"Введите {i+1}-й из {N} элемент первого массива: ")))
# M = int(input("Введите длину второго массива: "))
# list2 = []
# for i in range(M):
#     list2.append(int(input(f"Введите {i+1}-й из {M} элемент второго массива: ")))
# for item in list1:
#     if item not in list2:
#         print(item,end=" ")

# Задача №41. Решение в группах
# Дан массив, состоящий из целых чисел. Напишите
# программу, которая в данном массиве определит
# количество элементов, у которых два соседних и, при
# этом, оба соседних элемента меньше данного. Сначала
# вводится число N — количество элементов в массиве
# Далее записаны N чисел — элементы массива. Массив
# состоит из целых чисел.
# (каждое число вводится с новой строки)

# N = int(input("Введите длину массива: "))
# list = []
# for i in range(N):
#     list.append(int(input(f"Введите {i+1}-й из {N} элемент массива: ")))
# count = 0
# for i in range(1,N-1):
#     if list[i-1] < list[i] > list[i+1]:
#         count += 1
# print(count)

# Задача №43. Общее обсуждение
# Дан список чисел. Посчитайте, сколько в нем пар
# элементов, равных друг другу. Считается, что любые
# два элемента, равные друг другу образуют одну пару,
# которую необходимо посчитать. Вводится список
# чисел. Все числа списка находятся на разных
# строках.

# N = int(input("Введите длину массива: "))
# list = []
# for i in range(N):
#     list.append(int(input(f"Введите {i+1}-й из {N} элемент массива: ")))
# pairs = set()
# count = 0
# for item in list:
#     # если это число мы ещё не анализировали
#     if item not in pairs:
#         # запоминаем, что это число мы уже анализировали, чтобы не делать это снова
#         pairs.add(item)
#         # если повторы есть
#         if list.count(item) > 1:
#             # если их чётное количество
#             if list.count(item) % 2 == 0:
#                 # увеличиваем счётчик на половину от количества, т.к. каждую пару(!) нужно учесто один раз
#                 count += list.count(item) / 2
#             # если их нечётное количество
#             else:
#                 # увеличиваем счётчик на половину за вычетом 1, т.к. один повтор - не в паре
#                 count += (list.count(item)-1) / 2
# print(int(count))
        
# Задача №45. Решение в группах
# Два различных натуральных числа n и m называются
# дружественными, если сумма делителей числа n
# (включая 1, но исключая само n) равна числу m и
# наоборот. Например, 220 и 284 – дружественные числа.
# По данному числу k выведите все пары дружественных
# чисел, каждое из которых не превосходит k. Программа
# получает на вход одно натуральное число k, не
# превосходящее 105
# . Программа должна вывести все
# пары дружественных чисел, каждое из которых не
# превосходит k. Пары необходимо выводить по одной в
# строке, разделяя пробелами. Каждая пара должна быть
# выведена только один раз (перестановка чисел новую
# пару не дает).
# Ввод: Вывод:
# 300   220 284

import CustomFuncs
k = int(input("Введите k: "))
dict = dict()
for i in range(3,k):
    for j in range(4,k+1):
        if i != j:
            sum1 = CustomFuncs.SumOfDivisors(i)
            sum2 = CustomFuncs.SumOfDivisors(j)
            if (sum1 == j) and (sum2 == i) and (f"{i}-{j}" not in dict) and (f"{j}-{i}" not in dict):
                dict[f"{i}-{j}"] = ""
                print(i,j)
